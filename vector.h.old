#include <type_traits>
#include <vector>
#include <initializer_list>

template<class T, unsigned int N, class Allocator = std::allocator<T>>
class MathVector;

class MathVectorHelper {
private:
    template<class T, unsigned int N, class Allocator>
    friend class MathVector;

    template<class... Ts>
    struct AllSame : std::false_type { };

    template<class T>
    struct AllSame<T> : std::true_type { };

    template<class T, class... Ts>
    struct AllSame<T, T, Ts...> : AllSame<T, Ts...> { };

    template<bool B, class T1 = void, class T2 = void>
    struct SwitchTypeIf { typedef T1 Type; };

    template<class T1, class T2>
    struct SwitchTypeIf<true, T1, T2> { typedef T2 Type; };

    template<class T>
    using FloatingType = typename SwitchTypeIf<AllSame<T,double>::value, float, double>::Type;
};

template<class T, unsigned int N, class Allocator>
class MathVector {
private:
    T* data;
    Allocator allocator;
public:
    class Iterator;
    class Exception;
    MathVector();
    MathVector(const T& DefaultValue);
    template<class... T2,
             typename std::enable_if<sizeof...(T2) == N, int>::type = 0,
             typename std::enable_if<MathVectorHelper::AllSame<T, T2...>::value, int>::type = 0>
    MathVector(T2... args);
    MathVector(const MathVector<T, N, Allocator>& other);
    template<unsigned int N2,
             typename... T2,
             typename std::enable_if<sizeof...(T2) + N2 == N, int>::type = 0,
             typename std::enable_if<MathVectorHelper::AllSame<T, T2...>::value, int>::type = 0>
    MathVector(const MathVector<T, N2, Allocator>& other, T2... args);
    virtual ~MathVector();
    T& operator[](unsigned int i);
    const T& operator[](unsigned int i) const;
    template<unsigned int N2,
             typename std::enable_if<N2 <= N, int>::type = 0>
    MathVector& operator+=(const MathVector<T,N2,Allocator>& other);
    template<unsigned int N2,
             typename std::enable_if<N2 <= N, int>::type = 0>
    MathVector operator+(const MathVector<T,N2,Allocator>& other) const;
    template<unsigned int N2,
             typename std::enable_if<(N2 > N), int>::type = 0>
    MathVector<T, N2, Allocator> operator+(const MathVector<T, N2, Allocator>& other) const;
    MathVector operator-() const;
    template<unsigned int N2,
             typename std::enable_if<N2 <= N, int>::type = 0>
    MathVector& operator-=(const MathVector<T,N2,Allocator>& other);
    template<unsigned int N2,
             typename std::enable_if<N2 <= N, int>::type = 0>
    MathVector operator-(const MathVector<T,N2,Allocator>& other) const;
    template<unsigned int N2,
             typename std::enable_if<(N2 > N), int>::type = 0>
    MathVector<T, N2, Allocator> operator-(const MathVector<T, N2, Allocator>& other) const;
    template<unsigned int N2,
             typename std::enable_if<N2 <= N, int>::type = 0>
    MathVectorHelper::FloatingType<T> operator*(const MathVector<T,N2,Allocator>& other) const;
    template<unsigned int N2,
             typename std::enable_if<(N2 > N), int>::type = 0>
    MathVectorHelper::FloatingType<T> operator*(const MathVector<T, N2, Allocator>& other) const;
    MathVector& operator*=(MathVectorHelper::FloatingType<T> other);
    MathVector operator*(MathVectorHelper::FloatingType<T> other) const;
    MathVector& operator/=(MathVectorHelper::FloatingType<T> other);
    MathVector operator/(MathVectorHelper::FloatingType<T> other) const;
    MathVectorHelper::FloatingType<T> getLength() const;
    Iterator begin();
    Iterator end();
};

template <class T,
          unsigned int N,
          class Allocator>
class MathVector<T,N,Allocator>::Iterator {
private:
    T* data;
    MathVector<T,N,Allocator>* myself;
    Iterator(T* data, MathVector<T,N,Allocator>* myself);
    friend class MathVector<T,N,Allocator>;
public:
    typedef int difference_type;
    typedef T value_type;
    typedef T* pointer;
    typedef T& reference;
    typedef std::random_access_iterator_tag iterator_category;
    Iterator();
    Iterator(const Iterator& it);
    Iterator& operator=(const Iterator& it);
    ~Iterator();
    T& operator*();
    const T& operator*() const;
    Iterator& operator++();
    Iterator operator++(int x);
    Iterator& operator--();
    Iterator operator--(int x);
    Iterator& operator+=(int x);
    Iterator operator+(int x) const;
    Iterator& operator-=(int x);
    Iterator operator-(int x) const;
    T& operator[](int x);
    const T& operator[](int x) const;
    int operator-(const Iterator& it) const;
    bool operator==(const Iterator& it) const;
    bool operator!=(const Iterator& it) const;
    bool operator<(const Iterator& it) const;
    bool operator>(const Iterator& it) const;
    bool operator<=(const Iterator& it) const;
    bool operator>=(const Iterator& it) const;
    T* operator->();
    const T* operator->() const;
};

template <class T,
          unsigned int N,
          class Allocator>
class MathVector<T,N,Allocator>::Exception : std::exception {
    std::string message;
public:
    Exception(const std::string& s);
    ~Exception();
    const char* what() const throw();
};

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T,N,Allocator>::MathVector() {
    allocator = Allocator();
    data = allocator.allocate(N);
    for (unsigned int i = 0; i < N; i++)
        data[i] = T();
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T,N,Allocator>::MathVector(const T& DefaultValue) {
    allocator = Allocator();
    data = allocator.allocate(N);
    for (unsigned int i = 0; i < N; i++)
        data[i] = DefaultValue;
}

template <class T,
          unsigned int N,
          class Allocator>
template <class... T2,
          typename std::enable_if<sizeof...(T2) == N, int>::type,
          typename std::enable_if<MathVectorHelper::AllSame<T, T2...>::value, int>::type>
MathVector<T,N,Allocator>::MathVector(T2... args) {
    allocator = Allocator();
    data = allocator.allocate(N);
    int i = 0;
    for (T t : {args...}) {
        data[i] = t;
        i++;
    }
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T,N,Allocator>::MathVector(const MathVector<T, N, Allocator>& other) {
    allocator = Allocator();
    data = allocator.allocate(N);
    for (int i = 0; i < N; i++)
    {
        data[i] = other[i];
    }
}

template <class T,
          unsigned int N,
          class Allocator>
template <unsigned int N2,
          class... T2,
          typename std::enable_if<sizeof...(T2) + N2 == N, int>::type,
          typename std::enable_if<MathVectorHelper::AllSame<T, T2...>::value, int>::type>
MathVector<T,N,Allocator>::MathVector(const MathVector<T, N2, Allocator>& other, T2... args) {
    allocator = Allocator();
    data = allocator.allocate(N);
    for (int i = 0; i < N2; i++)
    {
        data[i] = other[i];
    }
    int i = N2;
    for (T t : {args...}) {
        data[i] = t;
        i++;
    }
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T,N,Allocator>::~MathVector() {
    allocator.deallocate(data, N);
    data = nullptr;
}

template <class T,
          unsigned int N,
          class Allocator>
T& MathVector<T,N,Allocator>::operator[](unsigned int i) {
    if (i < N)
        return data[i];
    throw MathVector<T,N,Allocator>::Exception("Index out of range");
}

template <class T,
          unsigned int N,
          class Allocator>
const T& MathVector<T,N,Allocator>::operator[](unsigned int i) const {
    if (i < N)
        return data[i];
    throw MathVector<T,N,Allocator>::Exception("Index out of range");
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<N2 <= N, int>::type>
MathVector<T,N,Allocator>& MathVector<T,N,Allocator>::operator+=(const MathVector<T,N2,Allocator>& other) {
    for (int i = 0; i < N2; i++)
        this->operator[](i) += other[i];
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<N2 <= N, int>::type>
MathVector<T,N,Allocator> MathVector<T,N,Allocator>::operator+(const MathVector<T,N2,Allocator>& other) const {
    MathVector<T,N,Allocator> ret(*this);
    return ret += other;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<(N2 > N), int>::type>
MathVector<T,N2,Allocator> MathVector<T,N,Allocator>::operator+(const MathVector<T,N2,Allocator>& other) const {
    return other.operator+(*this);
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T,N,Allocator> MathVector<T,N,Allocator>::operator-() const {
    MathVector<T,N,Allocator> ret(*this);
    for (int i = 0; i < N; i++)
        ret[i] = - ret[i];
    return ret;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<N2 <= N, int>::type>
MathVector<T,N,Allocator>& MathVector<T,N,Allocator>::operator-=(const MathVector<T,N2,Allocator>& other) {
    for (int i = 0; i < N2; i++)
        this->operator[](i) -= other[i];
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<N2 <= N, int>::type>
MathVector<T,N,Allocator> MathVector<T,N,Allocator>::operator-(const MathVector<T,N2,Allocator>& other) const {
    MathVector<T,N,Allocator> ret(*this);
    return ret -= other;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<(N2 > N), int>::type>
MathVector<T,N2,Allocator> MathVector<T,N,Allocator>::operator-(const MathVector<T,N2,Allocator>& other) const {
    return -other += *this;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<N2 <= N, int>::type>
MathVectorHelper::FloatingType<T> MathVector<T,N,Allocator>::operator*(const MathVector<T,N2,Allocator>& other) const {
    float sum = 0.0f;
    for (int i = 0; i < N2; i++)
        sum += this->operator[](i) * other[i];
    return sum;
}

template <class T,
          unsigned int N,
          class Allocator>
template<unsigned int N2,
         typename std::enable_if<(N2 > N), int>::type>
MathVectorHelper::FloatingType<T> MathVector<T,N,Allocator>::operator*(const MathVector<T,N2,Allocator>& other) const {
    return other.operator*(*this);
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>& MathVector<T, N, Allocator>::operator*=(MathVectorHelper::FloatingType<T> other) {
    for (int i = 0; i < N; i++)
        this->operator[](i) *= other;
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator> MathVector<T, N, Allocator>::operator*(MathVectorHelper::FloatingType<T> other) const {
    MathVector<T,N,Allocator> ret(*this);
    return ret *= other;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator> operator*(MathVectorHelper::FloatingType<T> scalar, const MathVector<T, N, Allocator>& vector) {
    return vector * scalar;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>& MathVector<T, N, Allocator>::operator/=(MathVectorHelper::FloatingType<T> other) {
    if (other == 0.0)
        throw MathVector<T,N,Allocator>::Exception("Division by zero.");
    for (int i = 0; i < N; i++)
        this->operator[](i) /= other;
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator> MathVector<T, N, Allocator>::operator/(MathVectorHelper::FloatingType<T> other) const {
    MathVector<T,N,Allocator> ret(*this);
    return ret /= other;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVectorHelper::FloatingType<T> MathVector<T, N, Allocator>::getLength() const {
    return this->operator*(*this);
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator MathVector<T, N, Allocator>::begin() {
    return Iterator(data);
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator MathVector<T, N, Allocator>::end() {
    return Iterator(data + N);
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>::Iterator::Iterator(T* data, MathVector<T,N,Allocator>* myself) : data(data), myself(myself) {}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>::Iterator::Iterator() : data(nullptr), myself(nullptr) {}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>::Iterator::Iterator(const Iterator& it) : data(it.data), myself(it.myself) {}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator& MathVector<T, N, Allocator>::Iterator::operator=(const Iterator& it) {
    this->data = it.data;
    this->myself = it.myself;
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>::Iterator::~Iterator() {}

template <class T,
          unsigned int N,
          class Allocator>
T& MathVector<T, N, Allocator>::Iterator::operator*() {
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return *data;
}

template <class T,
          unsigned int N,
          class Allocator>
const T& MathVector<T, N, Allocator>::Iterator::operator*() const {
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return *data;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator& MathVector<T, N, Allocator>::Iterator::operator++() {
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    ++data;
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator MathVector<T, N, Allocator>::Iterator::operator++(int x) {
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    Iterator it(*this);
    ++data;
    return it;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator& MathVector<T, N, Allocator>::Iterator::operator--() {
    --data;
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator MathVector<T, N, Allocator>::Iterator::operator--(int x) {
    Iterator it(*this);
    --data;
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return it;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator& MathVector<T, N, Allocator>::Iterator::operator+=(int x) {
    data+=x;
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N < data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator MathVector<T, N, Allocator>::Iterator::operator+(int x) const {
    Iterator it(*this);
    data+=x;
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N < data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return it;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator operator+(int x,  const typename MathVector<T, N, Allocator>::Iterator& y) {
    return y + x;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator& MathVector<T, N, Allocator>::Iterator::operator-=(int x) {
    data-=x;
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N < data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return *this;
}

template <class T,
          unsigned int N,
          class Allocator>
typename MathVector<T, N, Allocator>::Iterator MathVector<T, N, Allocator>::Iterator::operator-(int x) const {
    Iterator it(*this);
    data-=x;
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N < data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return it;
}

template <class T,
          unsigned int N,
          class Allocator>
T& MathVector<T, N, Allocator>::Iterator::operator[](int x) {
    return *(*this + x);
}

template <class T,
          unsigned int N,
          class Allocator>
const T& MathVector<T, N, Allocator>::Iterator::operator[](int x) const {
    return *(*this + x);
}

template <class T,
          unsigned int N,
          class Allocator>
int MathVector<T, N, Allocator>::Iterator::operator-(const typename MathVector<T, N, Allocator>::Iterator& it) const {
    if (this->myself != it.myself)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return this->data - it.data;
}

template <class T,
          unsigned int N,
          class Allocator>
bool MathVector<T, N, Allocator>::Iterator::operator==(const Iterator& it) const {
    return this->data == it.data && this->myself == it.myself;
}

template <class T,
          unsigned int N,
          class Allocator>
bool MathVector<T, N, Allocator>::Iterator::operator!=(const Iterator& it) const {
    return this->data != it.data || this->myself != it.myself;
}

template <class T,
          unsigned int N,
          class Allocator>
bool MathVector<T, N, Allocator>::Iterator::operator<(const typename MathVector<T, N, Allocator>::Iterator& it) const {
    return this->operator-(it) < 0;
}

template <class T,
          unsigned int N,
          class Allocator>
bool MathVector<T, N, Allocator>::Iterator::operator>(const typename MathVector<T, N, Allocator>::Iterator& it) const {
    return this->operator-(it) > 0;
}

template <class T,
          unsigned int N,
          class Allocator>
bool MathVector<T, N, Allocator>::Iterator::operator<=(const typename MathVector<T, N, Allocator>::Iterator& it) const {
    return this->operator-(it) <= 0;
}

template <class T,
          unsigned int N,
          class Allocator>
bool MathVector<T, N, Allocator>::Iterator::operator>=(const typename MathVector<T, N, Allocator>::Iterator& it) const {
    return this->operator-(it) >= 0;
}

template <class T,
          unsigned int N,
          class Allocator>
T* MathVector<T, N, Allocator>::Iterator::operator->() {
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return data;
}

template <class T,
          unsigned int N,
          class Allocator>
const T* MathVector<T, N, Allocator>::Iterator::operator->() const {
    if (myself == nullptr)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    if (myself->data > data || myself->data + N <= data)
        throw MathVector<T, N, Allocator>::Exception("Index out of range");
    return data;
}

template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>::Exception::Exception(const std::string& s) : message(s) {}


template <class T,
          unsigned int N,
          class Allocator>
MathVector<T, N, Allocator>::Exception::~Exception() {}

template <class T,
          unsigned int N,
          class Allocator>
const char* MathVector<T, N, Allocator>::Exception::what() const throw() {
    return message.c_str();
}
